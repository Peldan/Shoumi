{"id":"node_modules\\electron-reload\\main.js","dependencies":[{"name":"C:\\Users\\arvid\\IdeaProjects\\Shoumi\\node_modules\\electron-reload\\package.json","includedInParent":true,"mtime":1536446940695},{"name":"C:\\Users\\arvid\\IdeaProjects\\Shoumi\\package.json","includedInParent":true,"mtime":1537044159153},{"name":"electron","loc":{"line":1,"column":22},"parent":"C:\\Users\\arvid\\IdeaProjects\\Shoumi\\node_modules\\electron-reload\\main.js","resolved":"C:\\Users\\arvid\\IdeaProjects\\Shoumi\\node_modules\\electron\\index.js"},{"name":"chokidar","loc":{"line":2,"column":25},"parent":"C:\\Users\\arvid\\IdeaProjects\\Shoumi\\node_modules\\electron-reload\\main.js","resolved":"C:\\Users\\arvid\\IdeaProjects\\Shoumi\\node_modules\\chokidar\\index.js"},{"name":"fs","loc":{"line":3,"column":19},"parent":"C:\\Users\\arvid\\IdeaProjects\\Shoumi\\node_modules\\electron-reload\\main.js","resolved":"C:\\Users\\arvid\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\src\\builtins\\_empty.js"},{"name":"child_process","loc":{"line":4,"column":24},"parent":"C:\\Users\\arvid\\IdeaProjects\\Shoumi\\node_modules\\electron-reload\\main.js","resolved":"C:\\Users\\arvid\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\src\\builtins\\_empty.js"},{"name":"path","loc":{"line":5,"column":21},"parent":"C:\\Users\\arvid\\IdeaProjects\\Shoumi\\node_modules\\electron-reload\\main.js","resolved":"C:\\Users\\arvid\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\node_modules\\path-browserify\\index.js"}],"generated":{"js":"const {app} = require('electron')\nconst chokidar = require('chokidar')\nconst fs = require('fs')\nconst {spawn} = require('child_process')\nconst path = require('path')\n\nmodule.exports = (glob, options) => {\n  options = options || {}\n  let browserWindows = []\n\n  // Main file poses a special case, as its changes are\n  // only effective when the process is restarted (hard reset)\n  let appPath = app.getAppPath()\n  let config = require(path.join(appPath, 'package.json'))\n  let mainFile = path.join(appPath, config.main || 'index.js')\n\n  // Watch everything but the node_modules folder and main file\n  // main file changes are only effective if hard reset is possible\n  let opts = Object.assign({\n    ignored:\n    [\n      mainFile,\n      /node_modules|[/\\\\]\\./\n    ]}, options)\n  let watcher = chokidar.watch(glob, opts)\n\n  /**\n   * Callback function to be executed when any of the files\n   * defined in given 'glob' is changed.\n   */\n  let onChange = () => {\n    browserWindows.forEach((bw) => {\n      bw.webContents.reloadIgnoringCache()\n    })\n  }\n\n  // Add each created BrowserWindow to list of maintained items\n  app.on('browser-window-created', (e, bw) => {\n    browserWindows.push(bw)\n\n    // Remove closed windows from list of maintained items\n    bw.on('closed', function () {\n      let i = browserWindows.indexOf(bw) // Must use current index\n      browserWindows.splice(i, 1)\n    })\n  })\n\n  // Preparing hard reset if electron executable is given in options\n  // A hard reset is only done when the main file has changed\n  let eXecutable = options.electron\n  if (eXecutable && fs.existsSync(eXecutable)) {\n    chokidar.watch(mainFile).once('change', () => {\n      // Detaching child is useful when in Windows to let child\n      // live after the parent is killed\n      let child = spawn(eXecutable, [appPath], {\n        detached: true,\n        stdio: 'inherit'\n      })\n      child.unref()\n      // Kamikaze!\n\n      // In cases where an app overrides the default closing or quiting actions\n      // firing an `app.quit()` may not actually quit the app. In these cases\n      // you can use `app.exit()` to gracefully close the app.\n      if (opts.hardResetMethod === 'exit') {\n        app.exit()\n      } else {\n        app.quit()\n      }\n    })\n  } else {\n    console.log('Electron could not be found. No hard resets for you!')\n  }\n\n  watcher.on('change', onChange)\n}\n","map":{"mappings":[{"source":"node_modules\\electron-reload\\main.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules\\electron-reload\\main.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}}],"sources":{"node_modules\\electron-reload\\main.js":"const {app} = require('electron')\nconst chokidar = require('chokidar')\nconst fs = require('fs')\nconst {spawn} = require('child_process')\nconst path = require('path')\n\nmodule.exports = (glob, options) => {\n  options = options || {}\n  let browserWindows = []\n\n  // Main file poses a special case, as its changes are\n  // only effective when the process is restarted (hard reset)\n  let appPath = app.getAppPath()\n  let config = require(path.join(appPath, 'package.json'))\n  let mainFile = path.join(appPath, config.main || 'index.js')\n\n  // Watch everything but the node_modules folder and main file\n  // main file changes are only effective if hard reset is possible\n  let opts = Object.assign({\n    ignored:\n    [\n      mainFile,\n      /node_modules|[/\\\\]\\./\n    ]}, options)\n  let watcher = chokidar.watch(glob, opts)\n\n  /**\n   * Callback function to be executed when any of the files\n   * defined in given 'glob' is changed.\n   */\n  let onChange = () => {\n    browserWindows.forEach((bw) => {\n      bw.webContents.reloadIgnoringCache()\n    })\n  }\n\n  // Add each created BrowserWindow to list of maintained items\n  app.on('browser-window-created', (e, bw) => {\n    browserWindows.push(bw)\n\n    // Remove closed windows from list of maintained items\n    bw.on('closed', function () {\n      let i = browserWindows.indexOf(bw) // Must use current index\n      browserWindows.splice(i, 1)\n    })\n  })\n\n  // Preparing hard reset if electron executable is given in options\n  // A hard reset is only done when the main file has changed\n  let eXecutable = options.electron\n  if (eXecutable && fs.existsSync(eXecutable)) {\n    chokidar.watch(mainFile).once('change', () => {\n      // Detaching child is useful when in Windows to let child\n      // live after the parent is killed\n      let child = spawn(eXecutable, [appPath], {\n        detached: true,\n        stdio: 'inherit'\n      })\n      child.unref()\n      // Kamikaze!\n\n      // In cases where an app overrides the default closing or quiting actions\n      // firing an `app.quit()` may not actually quit the app. In these cases\n      // you can use `app.exit()` to gracefully close the app.\n      if (opts.hardResetMethod === 'exit') {\n        app.exit()\n      } else {\n        app.quit()\n      }\n    })\n  } else {\n    console.log('Electron could not be found. No hard resets for you!')\n  }\n\n  watcher.on('change', onChange)\n}\n"},"lineCount":77}},"hash":"3512fd48519728264fd56d48ced6c311","cacheData":{"env":{}}}