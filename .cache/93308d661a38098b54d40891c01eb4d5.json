{"id":"node_modules\\electron-log\\lib\\format.js","dependencies":[{"name":"C:\\Users\\arvid\\IdeaProjects\\Shoumi\\node_modules\\electron-log\\package.json","includedInParent":true,"mtime":1536319191247},{"name":"C:\\Users\\arvid\\IdeaProjects\\Shoumi\\package.json","includedInParent":true,"mtime":1537044159153},{"name":"util","loc":{"line":3,"column":19},"parent":"C:\\Users\\arvid\\IdeaProjects\\Shoumi\\node_modules\\electron-log\\lib\\format.js","resolved":"C:\\Users\\arvid\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\node_modules\\util\\util.js"},{"name":"os","loc":{"line":4,"column":19},"parent":"C:\\Users\\arvid\\IdeaProjects\\Shoumi\\node_modules\\electron-log\\lib\\format.js","resolved":"C:\\Users\\arvid\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\node_modules\\os-browserify\\browser.js"}],"generated":{"js":"'use strict';\n\nvar util = require('util');\nvar EOL  = require('os').EOL;\n\nmodule.exports = {\n  format: format,\n  formatTimeZone: formatTimeZone,\n  pad: pad,\n  stringifyArray: stringifyArray\n};\n\nfunction format(msg, formatter) {\n  if (typeof formatter === 'function') {\n    return formatter(msg);\n  }\n\n  var date = msg.date;\n\n  return formatter\n    .replace('{level}', msg.level)\n    .replace('{text}', stringifyArray(msg.data))\n    .replace('{y}', date.getFullYear())\n    .replace('{m}', pad(date.getMonth() + 1))\n    .replace('{d}', pad(date.getDate()))\n    .replace('{h}', pad(date.getHours()))\n    .replace('{i}', pad(date.getMinutes()))\n    .replace('{s}', pad(date.getSeconds()))\n    .replace('{ms}', pad(date.getMilliseconds(), 3))\n    .replace('{z}', formatTimeZone(date.getTimezoneOffset()));\n}\n\nfunction stringifyArray(data) {\n  data = data.map(function formatErrors(arg) {\n    return arg instanceof Error ? arg.stack + EOL : arg;\n  });\n  return util.format.apply(util, data);\n}\n\nfunction pad(number, zeros) {\n  zeros = zeros || 2;\n  return (new Array(zeros + 1).join('0') + number).substr(-zeros, zeros);\n}\n\nfunction formatTimeZone(minutesOffset) {\n  var m = Math.abs(minutesOffset);\n  return (minutesOffset >= 0 ? '-' : '+') +\n    pad(Math.floor(m / 60)) + ':' +\n    pad(m % 60);\n}\n","map":{"mappings":[{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules\\electron-log\\lib\\format.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}}],"sources":{"node_modules\\electron-log\\lib\\format.js":"'use strict';\n\nvar util = require('util');\nvar EOL  = require('os').EOL;\n\nmodule.exports = {\n  format: format,\n  formatTimeZone: formatTimeZone,\n  pad: pad,\n  stringifyArray: stringifyArray\n};\n\nfunction format(msg, formatter) {\n  if (typeof formatter === 'function') {\n    return formatter(msg);\n  }\n\n  var date = msg.date;\n\n  return formatter\n    .replace('{level}', msg.level)\n    .replace('{text}', stringifyArray(msg.data))\n    .replace('{y}', date.getFullYear())\n    .replace('{m}', pad(date.getMonth() + 1))\n    .replace('{d}', pad(date.getDate()))\n    .replace('{h}', pad(date.getHours()))\n    .replace('{i}', pad(date.getMinutes()))\n    .replace('{s}', pad(date.getSeconds()))\n    .replace('{ms}', pad(date.getMilliseconds(), 3))\n    .replace('{z}', formatTimeZone(date.getTimezoneOffset()));\n}\n\nfunction stringifyArray(data) {\n  data = data.map(function formatErrors(arg) {\n    return arg instanceof Error ? arg.stack + EOL : arg;\n  });\n  return util.format.apply(util, data);\n}\n\nfunction pad(number, zeros) {\n  zeros = zeros || 2;\n  return (new Array(zeros + 1).join('0') + number).substr(-zeros, zeros);\n}\n\nfunction formatTimeZone(minutesOffset) {\n  var m = Math.abs(minutesOffset);\n  return (minutesOffset >= 0 ? '-' : '+') +\n    pad(Math.floor(m / 60)) + ':' +\n    pad(m % 60);\n}\n"},"lineCount":51}},"hash":"bb1df9604812e00cd5818945996f63ff","cacheData":{"env":{}}}